x <- as.matrix(read.table('Ex1_x'))
setwd("~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)")
setwd("~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)")
x <- as.matrix(read.table('Ex1_x'))
y <- as.matrix(read.table('Ex1_y'))
t <- as.matrix(read.table('Ex1_t'))
plot(x, t)
plot(t, x)
plot (t,y)
plot (t,y, type ='l', col = 'red')
lines(x, t, col='g')
lines(x, t, col='green')
plot(t, x)
plot(t, x, type = lines, col = 'green')
plot(t, x, type = 'lines', col = 'green')
lines(y, t, col='r')
lines(y, t, col='red')
plot(t, x, type = 'lines', col = 'green')
plot(t, x, type ='lines', col ='green')
lines(t, y, col='red')
trainadaline <- function(xin,yd,eta,tol,maxepocas,par){
#yd: tem que ser garado para as xin (concatenado xall), metade 0 e metade 1
#xin:Entrada Nxn de dados de matriz
#eta: Peso de atualizacao do passo
#tol: tolerancia do erro
#maxepocas: numero maximo de epocas permitido
#par: par=1 indica que -1 precisa ser acrescido a xin
N<-dim(xin)[1] #recebe as linhas
n<-dim(xin)[2] # recebe as colunas
if (par==1){
wt<-as.matrix(runif(n+1)-10^(-n-2)) #inicializa um vetor de n+1 elementos
xin<-cbind(1,xin)
}
if (par==0){
wt<-as.matrix(runif(n)-0.5) #inicializa um vetor de n+1 elementos
}
nepocas<-0
eepoca<-tol+1
#inicializa vetor erro evec,
evec<-matrix(nrow=1,ncol=maxepocas)
while ((nepocas < maxepocas) && (eepoca>tol))#eepocas erro da epoca e tol tolerancia
{
ei2<-0
#sequencia aleatoria para treinamento
xseq<-sample(N)
for (i in 1:N)
{
#padrao para sequencia aleatoria
irand<-xseq[i]
yhati<-xin[irand,] %*% wt
ei<-yd[irand]-yhati
dw<-eta * ei * xin[irand,]
#atualizacao do peso w
wt<-wt + dw
#erro acumulado
ei2<-ei2+ei*ei
}
#numero de epocas
nepocas<-nepocas+1
evec[nepocas]<-ei2/N
#erro por epoca
eepoca<-evec[nepocas]
}
retlist<-list(wt,evec[1:nepocas])
return(retlist)
}
relist<-treinadaline(x, y, 0.01, 0.01, 50, 1)
View(trainadaline)
relist<-trainadaline(x, y, 0.01, 0.01, 50, 1)
w <- relist[[1]]
error <- relist[[2]]
novo <- w%*%x
novo <- w.T%*%x
novo <- x%*%w
novo <- t(w)%*%x
novo <- w[[1]]*x + w[[2]]
line(t, novo, color='black')
line(t, novo, color="black")
line(t, novo, color="blue")
lines(t, novo, color="blue")
relist<-trainadaline(x, y, 0.01, 0.01, 150, 1)
w <- relist[[1]]
error <- relist[[2]]
novo <- w[[1]]*x + w[[2]]
plot(t, y, c='r')
plot(t, y, col='r')
plot(t, y, col='red')
plot(t, y, type = 'line, col='red')
plot(t, y, type = 'line', col='red')
lines(t, novo, color="blue")
lines(t, novo, col="blue")
plot(t, novo, type = 'line', col='red')
lines(t, y, col="blue")
relist<-trainadaline(x, y, 0.01, 0.01, 200, 1)
w <- relist[[1]]
error <- relist[[2]]
novo <- w[[1]]*x + w[[2]]
plot(t, novo, type = 'line', col='red')
lines(t, y, col="blue")
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 2, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 1, 1)
View(x)
View(x)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 1, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 1, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 1, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 1, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 1, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 1, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 1, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 1, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 1, 1)
x_temp<-trainadaline(x, y, 0.01, 0.01, 1, 1)[3]
View(x_temp)
View(x_temp)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
x_temp<-trainadaline(x, y, 0.01, 0.01, 1, 1)[3]
View(x_temp)
View(x_temp)
x_temp[[1]]
x_temp
x_temp[1]
x_temp[[1]]
x_temp[[2]]
x_temp[[1, 2]]
x_temp[[1]]
length(x_tem)
length(x_temp)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
x_temp<-trainadaline(x, y, 0.01, 0.01, 1, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
x_temp<-trainadaline(x, y, 0.01, 0.01, 1, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
x_temp<-trainadaline(x, y, 0.01, 0.01, 50, 1)
View(x_temp)
View(x_temp)
x_temp[[1]]
relist<-trainadaline(x, y, 0.01, 0.01, 50, 1)
w <- relist[[1]]
error <- relist[[2]]
novo <- w[[1]]*x + w[[2]]
plot(t, novo, col='b')
plot(t, novo, col='blue')
plot(t, novo, col='blue', type=line)
plot(t, novo, col='blue', type='line')
lines(t, novo, col='red')
plot(t, novo, col='blue', type=line)
plot(t, novo, col='blue', type='line')
lines(t, y, col='red')
lines(t, x, col='red')
plot(t, y, col='blue', type='line')
lines(t, novo, col='red')
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/yadaline.R')
novo <- yadaline(x, w, 1)
plot(t, y, col='blue', type='line')
lines(t, novo, col='red')
plot(error)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 50, 1)
w <- relist[[1]]
error <- relist[[2]]
plot(error)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 50, 1)
relist<-trainadaline(x, y, 0.01, 0.01, 100, 1)
relist<-trainadaline(x, y, 0.01, 0.01, 100, 1)
relist<-trainadaline(x, y, 0.01, 0.01, 50, 1)
x <- as.matrix(read.table('Ex1_x))
x <- as.matrix(read.table('Ex1_x'))
y <- as.matrix(read.table('Ex1_y'))
t <- as.matrix(read.table('Ex1_t))
t <- as.matrix(read.table('Ex1_t1))
t <- as.matrix(read.table('Ex1_t'))
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 50, 1)
View(relist)
View(relist)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 50, 1)
View(relist)
View(relist)
relist <- 0
relist<-trainadaline(x, y, 0.01, 0.01, 50, 1)
View(trainadaline)
test<-trainadaline(x, y, 0.01, 0.01, 50, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
test<-trainadaline(x, y, 0.01, 0.01, 50, 1)
x <- as.matrix(read.table('Ex1_x'))
y <- as.matrix(read.table('Ex1_y'))
t <- as.matrix(read.table('Ex1_t'))
trainadaline <- function(xin,yd,eta,tol,maxepocas,par){
#yd: tem que ser garado para as xin (concatenado xall), metade 0 e metade 1
#xin:Entrada Nxn de dados de matriz
#eta: Peso de atualizacao do passo
#tol: tolerancia do erro
#maxepocas: numero maximo de epocas permitido
#par: par=1 indica que -1 precisa ser acrescido a xin
N<-dim(xin)[1] #recebe as linhas
n<-dim(xin)[2] # recebe as colunas
if (par==1){
wt<-as.matrix(runif(n+1)-10^(-n-2)) #inicializa um vetor de n+1 elementos
xin<-cbind(1,xin)
}
if (par==0){
wt<-as.matrix(runif(n)-0.5) #inicializa um vetor de n+1 elementos
}
nepocas<-0
eepoca<-tol+1
#inicializa vetor erro evec,
evec<-matrix(nrow=1,ncol=maxepocas)
while ((nepocas < maxepocas) && (eepoca>tol))#eepocas erro da epoca e tol tolerancia
{
ei2<-0
#sequencia aleatoria para treinamento
xseq<-sample(N)
for (i in 1:N)
{
#padrao para sequencia aleatoria
irand<-xseq[i]
yhati<-xin[irand,] %*% wt
ei<-yd[irand]-yhati
dw<-eta * ei * xin[irand,]
#atualizacao do peso w
wt<-wt + dw
#erro acumulado
ei2<-ei2+ei*ei
}
#numero de epocas
nepocas<-nepocas+1
evec[nepocas]<-ei2/N
#erro por epoca
eepoca<-evec[nepocas]
}
retlist<-list(wt, evec[1:nepocas])
return(relist)
}
relist<-trainadaline(x, y, 0.01, 0.01, 50, 1)
View(relist)
View(relist)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/trainadaline.R')
relist<-trainadaline(x, y, 0.01, 0.01, 50, 1)
source('~/OneDrive/Documentos/01 - UFMG/04 - 11° Semestre/04 - Redes neurais artificiais/Exercicio3(enunciado + codigo + dados)/yadaline.R')
y_new <- yadaline(x, relist[1], 1)
w <- relist[1]
w <- relist[[1]]
y_new <- yadaline(x, w, 1)
error<-relist[[2]]
plot(error)
plot(error, type='line')
relist<-trainadaline(x, y, 0.1, 0.001, 50, 1)
w <- relist[[1]]
y_new <- yadaline(x, w, 1)
plot(t, y, col='blue', type='line')
lines(t, y_new, col='red')
